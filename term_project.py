# -*- coding: utf-8 -*-
"""Term Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tVwgw6ndXw1le-W6kpbapukckRUz--Wf
"""

import random 
DNA = ['A','C','G','T']
random_list1 = []
for i in range(15):
    random_list1.append(random.choice(DNA))
    random_seq1 = ''.join(random_list1)
print(random_seq1)

random_list2 = []
for i in range(15):
    random_list2.append(random.choice(DNA))
    random_seq2 = ''.join(random_list2)
print(random_seq2)

DNA1 = random_seq1
DNA2 = random_seq2
print(DNA1)
print(DNA2)

def buildTable(X, Y, match=1, mismatch=-1, gap=-1):
    print("Sequence 1:", X)
    print("Sequence 2:", Y)
    
    opt = []
    for j in range(1+len(X)):
      row = []
      for k in range(1+len(Y)):
        row.append(0)
      opt.append(row)
    
    for j in range(1,len(opt)):
      for k in range(1,len(opt[0])):
        if X[j-1] == Y[k-1]:
          score1 = ((opt[j-1][k-1]) + match)
        else:
          score1 = ((opt[j-1][k-1]))
        score2 = ((opt[j-1][k]))
        score3 = ((opt[j][k-1]))
        opt[j][k] = max(score1,score2,score3)
  
    opt1 = []
    for j in range(1+len(X)):
      row = []
      for k in range(1+len(Y)):
        row.append(opt[j][k])
      opt1.append(row)
    
    print("The intermediate table of Values:")
    for row in opt1:
        print(' '.join('%3d' % val for val in row))

def lcs(X,Y,m,n):
  L = [[0 for a in range (n+1)] for b in range (m+1)]
  for a in range(m+1):
    for b in range (n+1):
      if a == 0 or b == 0:
        L[a][b] = 0 
      elif X[a-1] == Y[b-1]:
          L [a][b] = L[a-1][b-1]+1
      else: 
        L[a][b] = max(L[a-1][b],L[a][b-1])
  lcs = ""
  i = m 
  j = n
  while i > 0 and j > 0:
    if X[i-1] == Y[i-1]:
      lcs += X[i-1]
      i -= 1 
      j -= 1
    elif L[i-1][j] > L[i][j-1]:
      i -= 1
    else: 
      j -= 1
    lcs = lcs[::-1]
  lent = str(len(lcs))
  print(" LCS of " + X + " and " + Y + " is " + lcs)
  print(" LCS has length " + lent)

buildTable(DNA1, DNA2)
X = DNA1
Y = DNA2
m = len(X) 
n = len(Y)
lcs(X, Y, m, n)